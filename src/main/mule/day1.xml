<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="day1-part1" doc:id="6d801233-5951-43f5-9419-93394d85e83f" >
		<scheduler doc:name="Scheduler" doc:id="89e6264d-00e3-4ef0-a339-8c44d463e4e6" >
			<scheduling-strategy >
				<fixed-frequency timeUnit="DAYS" startDelay="1000"/>
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="Input" doc:id="faf379ff-508e-4fba-bdc9-9b457a0dba3a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
readUrl("classpath://inputs//day1.txt", "text/plain")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each Line" doc:id="6104b870-5522-41c2-b17e-29d515e7c257" collection='#[payload splitBy "\n"]'>
			<ee:transform doc:name="Do stuff" doc:id="bb297b61-f349-4712-b878-b03a48bd3c0a" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
import isNumeric, reverse from dw::core::Strings
import firstWith from dw::core::Arrays
fun findFirstNumber(line: String): String = 
	((line splitBy "") firstWith isNumeric($))
	
fun findLastNumber(line: String): String =
	(((reverse(line)) splitBy "") firstWith isNumeric($))
---
(findFirstNumber(payload) ++ findLastNumber(payload)) as Number]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</parallel-foreach>
		<ee:transform doc:name="Result" doc:id="b06b8c6d-5a8b-4ab2-b15f-6619290df57e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
sum(payload.payload)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="payload" doc:id="cff4de72-0709-4f81-9bf7-0acc4ed1bca7" message="#[payload]"/>
	</flow>
	<flow name="day1-part2" doc:id="4f3b88f3-74d1-4a17-b69c-0173de9e57b1" >
		<scheduler doc:name="Scheduler" doc:id="7910a35d-52c6-48ec-a134-34829138a402" >
			<scheduling-strategy >
				<fixed-frequency startDelay="1000" timeUnit="DAYS" />
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="Input" doc:id="eb85ec2f-4bc0-47c9-b695-fef3b9d46c38" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
readUrl("classpath://inputs//day1.txt", "text/plain")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each Line" doc:id="6513bed0-449e-4c3f-a402-e50becba0a9f" collection="#[dw::core::Strings::lines(payload)]" >
			<set-variable value="#[payload]" doc:name="line" doc:id="1c7e352e-99d1-4fa1-a3fe-7659cf8fafb7" variableName="line" />
			<ee:transform doc:name="Do stuff" doc:id="aef34c33-0cfc-43ff-b7c0-2c58e6ab7e53" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
import isNumeric, reverse from dw::core::Strings
import firstWith, some from dw::core::Arrays

var NUMBERS: Array = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
var hasWrittenValue: Boolean = NUMBERS some (payload contains $)

fun getWrittenIndexes(line) = 
    ((NUMBERS map (line find $)) map 
        if(!isEmpty($))
            {
                indexes: $,
                size: sizeOf(NUMBERS[$$])-1
            }
        else
            null) filter (!isEmpty($))

fun findFirstNumber(line: String) = 
	((line splitBy "") firstWith isNumeric($))
	
fun findLastNumber(line: String) = 
	(((reverse(line)) splitBy "") firstWith isNumeric($))
---
(if(hasWrittenValue)
	do {
        {
            firstWritten: ((getWrittenIndexes(payload) map 
            	if(sizeOf($.indexes) > 1) 
		            {
		        		i: min($.indexes),
		        		size: $.size
		        	}
	            else
	             	{
	             		i: $.indexes[0],
	             		size: $.size
	             	}) orderBy $.i)[0],
    		lastWritten: ((getWrittenIndexes(payload) map 
            	if(sizeOf($.indexes) > 1) 
		            {
		        		i: max($.indexes),
		        		size: $.size
		        	}
	            else
	             	{
	             		i: $.indexes[0],
	             		size: $.size
	             	}) orderBy $.i)[-1],
            (firstDigit: {
                i: payload indexOf findFirstNumber(payload)
            }) if (!isEmpty(findFirstNumber(payload))),
            (lastDigit: {
                i: payload lastIndexOf findLastNumber(payload)
            }) if (!isEmpty(findFirstNumber(payload)))
        }
    }
else
	(findFirstNumber(payload) ++ findLastNumber(payload)) as Number)]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<choice doc:name="Choice" doc:id="bf605e3a-0033-409a-bd3b-3b98ef39bba7" >
				<when expression="#[payload is Object]" >
					<ee:transform doc:name="Do more stuff" doc:id="e965b4ea-2360-4d97-a730-80e402e44d1c" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/java
var line = vars.line

fun convertWrittenToDigit(value: String): String = 
    value match {
        case 'zero' -> '0'
        case 'one' -> '1'
        case 'two' -> '2'
        case 'three' -> '3'
        case 'four' -> '4'
        case 'five' -> '5'
        case 'six' -> '6'
        case 'seven' -> '7'
        case 'eight' -> '8'
        case 'nine' -> '9'
    }

@Lazy
var firstDigit = 
    if(payload.firstWritten.i > payload.firstDigit.i)
        line[payload.firstDigit.i]
    else
        convertWrittenToDigit(line[payload.firstWritten.i to (payload.firstWritten.i + (payload.firstWritten.size))])
@Lazy
var lastDigit = 
    if(payload.lastWritten.i < payload.lastDigit.i)
        line[payload.lastDigit.i]
    else
        convertWrittenToDigit(line[payload.lastWritten.i to (payload.lastWritten.i + (payload.lastWritten.size))])

---
if(!payload.firstDigit?)
    convertWrittenToDigit(line[payload.firstWritten.i to (payload.firstWritten.i + (payload.firstWritten.size))]) ++ convertWrittenToDigit(line[payload.lastWritten.i to (payload.lastWritten.i + (payload.lastWritten.size))])
else
    firstDigit ++ lastDigit
]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<set-payload value="#[payload as Number]" doc:name="Set Payload" doc:id="33663b91-bf48-4225-a38a-79d2d45a70d5" />
				</when>
			</choice>
		</parallel-foreach>
		<ee:transform doc:name="Result" doc:id="fa847e49-50e1-428b-88ff-b457057f27a8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
sum(payload.payload)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="payload" doc:id="730b75f8-ee69-4625-b9c6-ef2aae4d04bc" message="#[payload]" />
	</flow>
</mule>
