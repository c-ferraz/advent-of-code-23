<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="day2-part1" doc:id="d92e8a7f-c743-4a79-9dc5-a67a0a434bb9" >
		<scheduler doc:name="Scheduler" doc:id="c5027980-4bd1-44b9-9640-a70fd846feef" >
			<scheduling-strategy >
				<fixed-frequency startDelay="1000" timeUnit="DAYS"/>
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="Initial values (2)" doc:id="0f1374c0-ee9b-4682-8825-020d0a4ada4f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
readUrl("classpath://inputs//day2.txt", "text/plain")]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="totalCubes" ><![CDATA[%dw 2.0
output application/java
---
{
	red: 12 , 
	green: 13,
	blue: 14
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each Game" doc:id="522cd4cd-44ec-4b16-8ec0-d11848e8f590" collection="#[dw::core::Strings::lines(payload)]">
			<ee:transform doc:name="Organize game data" doc:id="c1169c1b-140c-4fd6-b90e-c0a488b41f3d" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
var data = payload splitBy ":"
---
{
    gameId: (data[0] splitBy " ")[-1],
    rounds: (data[1] splitBy ";") 
                map ((cubes, index) -> (cubes splitBy ","
                    map (line, index) -> trim(line) splitBy " ")
                        map {
                            ($[1]): $[0]
                        }) map {($)}
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<ee:transform doc:name="Validate game" doc:id="6c87d21c-7c82-4206-b201-c06b8c3ffb04" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var rounds = payload.rounds
var totalCubes = vars.totalCubes
var COLORS = namesOf(totalCubes)
fun checkValidRound(round, counter = 0) = 
    if (counter > 2)
        true
    else if ((round[(COLORS[counter])] default -1) > totalCubes[(COLORS[counter])])
        false
    else
        checkValidRound(round, counter+1)

---
{
	gameId: payload.gameId,
	isValid: !(rounds map checkValidRound($) contains false)
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</parallel-foreach>
		<ee:transform doc:name="Result" doc:id="40860f8d-ca59-4db0-8a99-ad42b396d806" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
sum(payload.payload[?($.isValid)].gameId map $ as Number)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="payload" doc:id="b16dc78b-0b39-4bc7-956c-a1dee4e7b169" message="#[payload]"/>
	</flow>
	<flow name="day2-part2 - TODO" doc:id="7ad71e9c-30ee-434c-9d76-a4136fadfc41" >
		<scheduler doc:name="Scheduler" doc:id="f98a7bc7-eff0-416a-95c3-1c500edefc4b" >
			<scheduling-strategy >
				<fixed-frequency startDelay="1000" timeUnit="DAYS" />
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="Initial values (2)" doc:id="b14ee5f9-cae7-4c73-b96c-e3d1c8fcef00" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
readUrl("classpath://inputs//day2.txt", "text/plain")]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="totalCubes" ><![CDATA[%dw 2.0
output application/java
---
{
	red: 12 , 
	green: 13,
	blue: 14
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<parallel-foreach doc:name="Parallel For Each Game" doc:id="5706e4b2-ecf9-407c-9a7a-48caeaa0c376" collection="#[dw::core::Strings::lines(payload)]" >
			<ee:transform doc:name="Organize game data" doc:id="a084804b-502b-448e-adf3-b8f2fb79b47e" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/java
var data = payload splitBy ":"
---
{
    gameId: (data[0] splitBy " ")[-1],
    rounds: (data[1] splitBy ";") 
                map ((cubes, index) -> (cubes splitBy ","
                    map (line, index) -> trim(line) splitBy " ")
                        map {
                            ($[1]): $[0]
                        }) map {($)}
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<ee:transform doc:name="Validate game" doc:id="433cf2ee-4ac7-4010-a182-099266cb64d7" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var rounds = payload.rounds
var totalCubes = vars.totalCubes
var COLORS = namesOf(totalCubes)
fun checkValidRound(round, counter = 0) = 
    if (counter > 2)
        true
    else if ((round[(COLORS[counter])] default -1) > totalCubes[(COLORS[counter])])
        false
    else
        checkValidRound(round, counter+1)


---
{
	gameId: payload.gameId,
	isValid: !(rounds map checkValidRound($) contains false)
}]]></ee:set-payload>
				</ee:message>
			</ee:transform>
		</parallel-foreach>
		<ee:transform doc:name="Result" doc:id="e6d976aa-73b6-434f-be24-c7ff72fe6679" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
sum(payload.payload[?($.isValid)].gameId map $ as Number)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="payload" doc:id="3851bb91-bcb9-442b-86e3-7e80f714390d" message="#[payload]" />
	</flow>
</mule>
